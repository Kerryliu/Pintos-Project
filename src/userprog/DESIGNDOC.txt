+-----------------+
| ECE 434|
| PROJECT 2 |
| DESIGN DOCUMENT |
+-----------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Distribution of Work Table
--------------------------------------------------------------------------------------------------------------
|     Sajeel Ahmad      |                Kerry Liu                    |            Mehul Vora             |
|	33.3%	          |                     33.4%                    |                  33.3%               |
---------------------------------------------------------------------------------------------------------------

Sajeel Ahmad<sa886@rutgers.edu>
Kerry Liu<Kerry_liu@outlook.com>
Mehul Vora<mehul.vora@rutgers.edu>

---- PRELIMINARIES ----
>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

Having a hard time to compile and test our code. We followed your instructions via email and did our best to implement what we could for this project. 

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

https://en.wikipedia.org/wiki/Call_stack#Stack_and_frame_pointers
https://www.quora.com/What-is-a-call-stack






			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?

We implemented argument passing using the following steps. First, we used strtok_r() to parse the filename by “ “, and we used save pointer to keep track of the tokenizer's position. Then, we set the save pointer to the current stack pointer, which was positioned to be at the top of the stack. Next, we obtained all arguments needed to be pushed into the stack. Additionally, we then set up the array to be aligned with word size of the default 4. Then, we pushed all argv[i], argv, argc into the stack. Finally, we pushed a fake “return address” to keep consistent structure of stack frame. To get elements of argv[] in the right order we use memcpy, where we assigned the destination to the current stack pointer, which will be moving / shifting in the correct order, and the source as a reference to the argv[] we want to be copied into the stack.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

Pintos implements strtok_r()  because the _r version is reentrant. Moreover, it means you can call the strtok_r() function from multiple threads and/or nested loops. Furthermore, the strtok_r() can take an extra argument which can be used to hold states versus having to use a global variable. To simplify ,strtok_r() can take and use save_ptr as an additional argument and strtok can not. 


>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
Can protect the kernel from arguments that can produce unwanted errors
Gives kernel less to work to do and allows for more flexibility


SYSTEM CALLS
============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

Was pretty hard and challenging, and very time consuming, especially with 
trying to resolve the initial problems and kernel faults.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Any other comments?


